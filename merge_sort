/******************************************************************************
/*Program to implement Merge Sort */
/********************************************************************************/
#include <iostream>
using namespace std;
#define MAX_CAPACITY 10


class Array{
    private :int arr[MAX_CAPACITY];
             int size;
             void mergesort(int,int);
             void merge(int,int,int);
    public  : Array():size(0)
              {
                for(int i=0;i<MAX_CAPACITY;i++) arr[i]=0;
              }
              
              void input();
              void display();
              void sort();
};


   void Array::input()
   {
       cout<<"Enter the size of elements : ";
       cin >> size;
       
       if(size < 1 || size > MAX_CAPACITY)
       {
        cout<<"Please enter correct size in the range  \"1 <= size <= "<<MAX_CAPACITY<<endl;   
        exit(0);
       }
       
       cout<<"Enter the "<<size<<" elements"<<endl;
       for(int i=0;i<size;i++)
       {
          cin>>arr[i];
       }
       cout<<endl;
       
   }
   
   void Array::display(){
       cout<<"Elements of the array :";
       for(int i=0; i<size;i++)
       {
         cout<<" "<<arr[i];
       }
       cout<<endl;
   }
   
   void Array::merge(int low, int mid, int high)
   {
       int sizeL = mid-low+1;  //Size of temporary array to hold elements from low to mid
       int sizeR = high-mid;   //Size of temporary array to hold elements from mid+1 to high
       int arrL[sizeL];        //temporary array to hold elements from low to mid
       int arrR[sizeR];        //temporary array to hold elements from mid+1 to high
	          
       /* Copy elements low to mid from original array arr to temporary array arrL*/
       int k=low;  
       for(int index=0; index<sizeL; index++)
           arrL[index] = arr[k++];
          
       /* Copy elements  mid+1 to high from original array arr to temporary array arrR */
       k = mid+1;
       for(int index = 0; index< sizeR ;index++) 
           arrR[index] = arr[k++];
           
       /*compare contents of arrL and arrR and insert elements to arr in sorted order */            
       int left = 0;  //index for  accessing arrL :  0 to sizeL
       int right = 0; //index for accessing arrR :   0 to sizeR
       k = low;       //index for accessing original array : low to high
       
       while(left < sizeL && right < sizeR)
       {
           if(arrR[right] < arrL[left])   
              arr[k++] = arrR[right++];            
           else
              arr[k++] = arrL[left++];   
       }
       
        while(left  <  sizeL){
          arr[k++] = arrL[left++];
        }
          
        while(right < sizeR)
        {
          arr[k++] = arrR[right++];
        }
    }
   
   
   void Array::mergesort(int low, int high)
   {
       if(low<high)
       {
       int mid = low + (high - low)/2;   //(low+high)/2   might result in overflow if the value exceeds the integer limit.
       mergesort(low,mid);
       mergesort(mid+1,high);
       merge(low,mid,high);
       }
       
       return;
   }
void Array::sort()
{
    mergesort(0,size-1);
}

int main()
{
    Array arr;
    arr.input();
    arr.display();
    arr.sort();
    cout<<"********After sorting************"<<endl;
    arr.display();
   
    return 0; 
}
